<%!
    public static class SubmissionLock {
        public static final String FORM_NAME = "KS_RQT_SubmissionLock";
		public static final String SAVE_FORM_NAME = "KS_RQT_Lock";
        public static final String FIELD_CATALOG_NAME = "600000500";
        public static final String FIELD_CREATE_DATE = "3";
        public static final String FIELD_ID = "179";
        public static final String FIELD_NOTES = "600003021";
        public static final String FIELD_REQUEST_ID = "536870931";
        public static final String FIELD_SUBMIT_TYPE = "700088475";
        public static final String FIELD_SUBMITTER = "2";
        public static final String FIELD_TEMPLATE_ID = "700002203";
        public static final String FIELD_TEMPLATE_NAME = "700001000";
        public static final String FIELD_REQUEST_CLOSED_DATE = "700088489";
        public static final String FIELD_LOOKUP_ID = "700002450";
        public static final String FIELD_ORIGINATING_ID = "600000310";
		public static final String FIELD_LOCK_TYPE = "700000178";
		public static final String FIELD_LOCK_ACTION = "700000177";
		public static final String FIELD_LOCKED_ID = "700000179";
		public static final String FIELD_LOCKED_AT = "700000181";
		//This is only for get, for save, locked by is the submitter
		public static final String FIELD_LOCKED_BY = "536870934";


        // Represents the status of the Submission.
        public static final String FIELD_STATUS = "7";
        // Represents the status of the Request including task workflow (This is
        // a Enumeration field that allows values of 'Open' or 'Closed' and is
        // typically set by the KineticRequest_Submission_Close handler).
        public static final String FIELD_REQUEST_STATUS = "700089541";
        // Represents the state of the Request (This is a free text field that
        // is intended to communicate the overall progress of the Request.  This
        // value is typically set by the KineticRequest_Submission_UpdateStatus
        // task handler).
        public static final String FIELD_VALIDATION_STATUS = "700002400";

        public static final String[] FIELD_IDS = new String[] {
            FIELD_CATALOG_NAME, FIELD_CREATE_DATE, FIELD_ID, FIELD_REQUEST_ID,
            FIELD_NOTES, FIELD_SUBMIT_TYPE, FIELD_SUBMITTER, FIELD_TEMPLATE_ID,
            FIELD_TEMPLATE_NAME, FIELD_STATUS, FIELD_REQUEST_STATUS, FIELD_REQUEST_CLOSED_DATE, FIELD_VALIDATION_STATUS, 
			FIELD_LOCK_TYPE,FIELD_LOCK_ACTION,FIELD_LOCKED_ID,FIELD_LOCKED_AT,FIELD_LOCKED_BY};


        public static SubmissionLock[] find(HelperContext context, String qualification) {
            SubmissionLock[] results = new SubmissionLock[0];

            SimpleEntry[] entries = ArsBase.find(context, FORM_NAME, qualification, FIELD_IDS);
            if (entries != null && entries.length > 0) {
                results = new SubmissionLock[entries.length];
                for(int i=0;i<results.length;i++) {
                    results[i] = new SubmissionLock(entries[i]);
                }
            }

            return results;
        }

        public static SubmissionLock[] find(HelperContext context, String qualification, String[] sortFields, Integer chunkSize, Integer recordOffset, Integer sortOrder) {
            SubmissionLock[] results = new SubmissionLock[0];

            SimpleEntry[] entries = ArsBase.find(context, FORM_NAME, qualification, FIELD_IDS, sortFields, chunkSize, recordOffset, sortOrder);
            if (entries != null && entries.length > 0) {
                results = new SubmissionLock[entries.length];
                for(int i=0;i<results.length;i++) {
                    results[i] = new SubmissionLock(entries[i]);
                }
            }

            return results;
        }

        public static SubmissionLock findByInstanceId(HelperContext context, String id) {
            SubmissionLock result = null;

            SimpleEntry entry = ArsBase.findByInstanceId(context, FORM_NAME, id, FIELD_IDS);
            if (entry != null) {
                result = new SubmissionLock(entry);
            }

            return result;
        }
		
		public static SubmissionLock findSingle(HelperContext context, String qualification) {
            SubmissionLock result = null;

            SimpleEntry entry = ArsBase.findSingle(context, FORM_NAME, qualification, FIELD_IDS);
            if(entry != null) {
                result = new SubmissionLock(entry);
            }

            return result;
        }

        public static SubmissionLock[] findRecentByCatalogName(HelperContext context, String catalogName, Integer number) {
            SubmissionLock[] results = new SubmissionLock[0];

            String qualification =
                "'"+FIELD_CATALOG_NAME+"' = \""+catalogName+"\" AND "+
                "'"+FIELD_SUBMITTER+"' = \""+context.getUserName()+"\"";

            SimpleEntry[] entries = ArsBase.find(context, FORM_NAME, qualification, FIELD_IDS, number);
            if (entries != null && entries.length > 0) {
                results = new SubmissionLock[entries.length];
                for(int i=0;i<results.length;i++) {
                    results[i] = new SubmissionLock(entries[i]);
                }
            }

            return results;
        }

        public static SubmissionLock[] findRecentApprovalsByCatalogName(HelperContext context, String catalogName, Integer number) {
            return findRecentByCatalogNameAndSubmitType(context, catalogName, "Approval", number);
        } 

        public static SubmissionLock[] findRecentRequestsByCatalogName(HelperContext context, String catalogName, Integer number) {
            return findRecentByCatalogNameAndSubmitType(context, catalogName, null, number);
        }

        public static SubmissionLock[] findRecentWorkOrdersByCatalogName(HelperContext context, String catalogName, Integer number) {
            return findRecentByCatalogNameAndSubmitType(context, catalogName, "WorkOrder", number);
        }

        public static SubmissionLock[] findRecentByCatalogNameAndSubmitType(HelperContext context, String catalogName, String submitType, Integer number) {
            SubmissionLock[] results = new SubmissionLock[0];
            String qualification = null;
            if (submitType != null) {
                qualification = "'"+FIELD_CATALOG_NAME+"' = \""+catalogName+"\" AND "+
                                "'"+FIELD_SUBMITTER+"' = \""+context.getUserName()+"\" AND "+
                                "'"+FIELD_SUBMIT_TYPE+"' = \""+submitType+"\"";
            } else {
                qualification = "'"+FIELD_CATALOG_NAME+"' = \""+catalogName+"\" AND "+
                                "'"+FIELD_SUBMITTER+"' = \""+context.getUserName()+"\" AND "+
                                "'"+FIELD_SUBMIT_TYPE+"' = $NULL$";
            }

            SimpleEntry[] entries = ArsBase.find(context, FORM_NAME, qualification, FIELD_IDS, number);
            if (entries != null && entries.length > 0) {
                results = new SubmissionLock[entries.length];
                for(int i=0;i<results.length;i++) {
                    results[i] = new SubmissionLock(entries[i]);
                }
            }

            return results;
        }
        
        public SubmissionLock[] getChildren(HelperContext context) {
            String qualification = "'"+FIELD_LOOKUP_ID+"' = \""+getId()+"\" AND '"+FIELD_ID+"' != '"+FIELD_LOOKUP_ID+"'";
            SubmissionLock[] results = SubmissionLock.find(context, qualification);
            return results;
        }
        
        public SubmissionLock[] getDescendents(HelperContext context) {
            String qualification = "'"+FIELD_ORIGINATING_ID+"' = \""+getId()+"\" AND '"+FIELD_ID+"' != '"+FIELD_ORIGINATING_ID+"'";
            SubmissionLock[] results = SubmissionLock.find(context, qualification);
            return results;
        }
		public static SubmissionLock getLockRecord(HelperContext context, String lockID) {
            SubmissionLock lockRecord = null;

        	String qualification = "'1'=\""+lockID+"\"";
            java.util.Date now = new java.util.Date();
            System.out.println(now.toString()+" SubmissionLock#getLockRecord: finding lock using qual: "+qualification);
            try {
                lockRecord = findSingle(context, qualification);
            }
            catch (Exception e) {
                System.out.println(now.toString()+" SubmissionLock#getLockRecord: exception finding the lock record: "+e.getCause());
            }

            if (lockRecord == null) {
                System.out.println(now.toString()+" SubmissionLock#getLockRecord: no lock found");
            }
            else {
                System.out.println(now.toString()+" SubmissionLock#getLockRecord: existing lock found");
            }

            return lockRecord;
        }
		
		public static void saveLock(HelperContext context, String lockID, String action) {
			SubmissionLock originalRecord = getLockRecord(context, lockID);

            // Update The SubmissionLock record with new Action
            SimpleEntry entrySave = new SimpleEntry();
            entrySave.setSchemaName(SAVE_FORM_NAME);
            entrySave.setEntryItems(new Hashtable());
            entrySave.setEntryFieldValue("1", lockID);
            entrySave.setEntryFieldValue(FIELD_LOCK_ACTION, action);

            // Build the helper
            ArsHelper helper = null;
            try {
                helper = new ArsHelper(context, SAVE_FORM_NAME);
            } catch (Exception e) {
                throw new RuntimeException("Unable to initialize an ArsHelper instance.", e);
            }

            try {
	            helper.doSetSimpleEntry(entrySave);
            } catch (Exception e) {
                throw new RuntimeException("There was a problem saving the "+SAVE_FORM_NAME+" record.", e);
            }

        }

        private SimpleEntry entry = null;

        public SubmissionLock(SimpleEntry entry) {
            this.entry = entry;
        }

        public String getCatalogName() {return entry.getEntryFieldValue(FIELD_CATALOG_NAME);}
        public String getCreateDate() {return entry.getEntryFieldValue(FIELD_CREATE_DATE);}
        public String getId() {return entry.getEntryFieldValue(FIELD_ID);}
        public String getNotes() {return entry.getEntryFieldValue(FIELD_NOTES);}
        public String getRequestId() {return entry.getEntryFieldValue(FIELD_REQUEST_ID);}
        public String getSubmitType() {return entry.getEntryFieldValue(FIELD_SUBMIT_TYPE);}
        public String getTemplateId() {return entry.getEntryFieldValue(FIELD_TEMPLATE_ID);}
        public String getTemplateName() {return entry.getEntryFieldValue(FIELD_TEMPLATE_NAME);}
        public String getStatus() {return entry.getEntryFieldValue(FIELD_STATUS);}
        public String getRequestStatus() {return entry.getEntryFieldValue(FIELD_REQUEST_STATUS);}
        public String getRequestClosedDate() {return entry.getEntryFieldValue(FIELD_REQUEST_CLOSED_DATE);}
        public String getValiationStatus() {return entry.getEntryFieldValue(FIELD_VALIDATION_STATUS);}
		public String getLockedBy() {return entry.getEntryFieldValue(FIELD_LOCKED_BY);}
		public String getLockedID() {return entry.getEntryFieldValue(FIELD_LOCKED_ID);}
    }
%>