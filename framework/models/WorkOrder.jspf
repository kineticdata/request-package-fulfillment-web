<%!
    public static class WorkOrder {
      public static final String FLD_REQUEST_ID = "1"; // CustomerSurvey Id
      public static final String FLD_INSTANCE_ID = "179"; // Instance Id
      public static final String FLD_STATUS = "7"; // Status

      public static final String FLD_WORK_ORDER = "600000300"; // Originating Form
      public static final String FLD_REQUEST_NAME = "700001000"; // Survey Template Name

      public static final String FLD_ORIGINATING_ID = "600000310"; // Originating Id
      public static final String FLD_ORIGINATING_SOURCE = "700006300"; // Source

      public static final String FLD_REQUESTED_FOR_ID = "770001011"; // Requested For
      public static final String FLD_REQUESTED_FOR_NAME = "770001015"; // Requested For Display Name
      public static final String FLD_ASSIGNEE_ID = "770001009"; // Assigned Individual
      public static final String FLD_ASSIGNEE_NAME = "770001013"; // Assigned Individual Display Name

      public static final String FLD_DUE_DATE = "770001018"; // Due Date
      public static final String FLD_DETAILS = "600003021"; // NotesForCustomer
      public static final String FLD_SUMMARY = "600000115"; // Multi-Purpose Info
      public static final String FLD_ASSIGNED_GROUPS = "770001008"; // Assigned Group
      public static final String FLD_ASSIGNED_GROUP_NAMES = "770001012"; // Assigned Group Display Names

      public static final String FLD_CREATED_DATE = "3"; // Create Date
      public static final String FLD_MODIFIED_DATE = "6"; // Modified Date

      public static final String FLD_SUBMIT_TYPE = "700088475"; // Submit Type

      public static final Map<String,String> SORTABLE_FIELDS = new HashMap<String,String>();
      static {
        SORTABLE_FIELDS.put("requestName",FLD_REQUEST_NAME);
        SORTABLE_FIELDS.put("workOrder",FLD_WORK_ORDER);
        SORTABLE_FIELDS.put("originatingId",FLD_ORIGINATING_ID);
        SORTABLE_FIELDS.put("status",FLD_STATUS);
        SORTABLE_FIELDS.put("due",FLD_DUE_DATE);
        SORTABLE_FIELDS.put("id",FLD_REQUEST_ID);
        SORTABLE_FIELDS.put("createdDate",FLD_CREATED_DATE);
        SORTABLE_FIELDS.put("modifiedDate",FLD_MODIFIED_DATE);
      }

      public static final Map<String,String> FILTER_FIELDS = new HashMap<String,String>();
      static {
        FILTER_FIELDS.put("id",FLD_REQUEST_ID);
        FILTER_FIELDS.put("requestName", FLD_REQUEST_NAME);
        FILTER_FIELDS.put("workOrder", FLD_WORK_ORDER);
        FILTER_FIELDS.put("requestedFor", FLD_REQUESTED_FOR_NAME);
        FILTER_FIELDS.put("requestedFor.name", FLD_REQUESTED_FOR_NAME);
        FILTER_FIELDS.put("requestedFor.loginId", FLD_REQUESTED_FOR_ID);
        FILTER_FIELDS.put("assignee", FLD_ASSIGNEE_NAME);
        FILTER_FIELDS.put("assignee.name", FLD_ASSIGNEE_NAME);
        FILTER_FIELDS.put("assignee.loginId", FLD_ASSIGNEE_ID);
        FILTER_FIELDS.put("originator.id", FLD_ORIGINATING_ID);
        FILTER_FIELDS.put("originator.source", FLD_ORIGINATING_SOURCE);
        FILTER_FIELDS.put("status", FLD_STATUS);
        FILTER_FIELDS.put("due", FLD_DUE_DATE);
        FILTER_FIELDS.put("details", FLD_DETAILS);
        FILTER_FIELDS.put("summary", FLD_SUMMARY);
        FILTER_FIELDS.put("groups", FLD_ASSIGNED_GROUPS);
        FILTER_FIELDS.put("submitType", FLD_SUBMIT_TYPE);
      }

      public static final String[] FIELD_IDS = new String[] {
        FLD_REQUEST_ID,FLD_ORIGINATING_ID,FLD_ORIGINATING_SOURCE,FLD_STATUS,FLD_WORK_ORDER,
        FLD_REQUEST_NAME,FLD_REQUESTED_FOR_NAME,FLD_REQUESTED_FOR_ID,FLD_ASSIGNEE_ID,
        FLD_ASSIGNEE_NAME,FLD_DUE_DATE,FLD_DETAILS,FLD_SUMMARY,FLD_ASSIGNED_GROUPS,
        FLD_CREATED_DATE,FLD_MODIFIED_DATE,FLD_SUBMIT_TYPE,FLD_ASSIGNED_GROUP_NAMES,
        FLD_INSTANCE_ID
      };

        public static final String FORM_NAME = "KS_SRV_CustomerSurvey_base";

        public static int count(HelperContext context, String qualification) {
            return ArsBase.count(context, FORM_NAME, qualification);
        }

        public static WorkOrder[] find(HelperContext context, String qualification) {
            WorkOrder[] results = new WorkOrder[0];

            SimpleEntry[] entries = ArsBase.find(context, FORM_NAME, qualification, FIELD_IDS);
            if (entries != null && entries.length > 0) {
                results = new WorkOrder[entries.length];
                for(int i=0;i<results.length;i++) {
                    results[i] = new WorkOrder(context, entries[i]);
                }
            }

            return results;
        }

        public static WorkOrder findSingleById(HelperContext context, String workOrderId) {
            WorkOrder result = null;

            String qualification = "'" + FLD_REQUEST_ID + "'=\"" + workOrderId + "\"";
            SimpleEntry entry = ArsBase.findSingle(context, FORM_NAME, qualification, FIELD_IDS);
            if(entry != null) {
                result = new WorkOrder(context, entry);
            }

            return result;
        }

        public static WorkOrder[] find(HelperContext context, String qualification, String[] sortFields, Integer chunkSize, Integer recordOffset, Integer sortOrder) {
            WorkOrder[] results = new WorkOrder[0];
            SimpleEntry[] entries = ArsBase.find(context, FORM_NAME, qualification, FIELD_IDS, sortFields, chunkSize, recordOffset, sortOrder);
            if (entries != null && entries.length > 0) {
                results = new WorkOrder[entries.length];
                for(int i=0;i<results.length;i++) {
                    results[i] = new WorkOrder(context, entries[i]);
                }
            }

            return results;
        }

        private SimpleEntry entry = null;
        private HelperContext context = null;

        public WorkOrder(HelperContext context, SimpleEntry entry) {
            if (entry == null) {
                throw new IllegalArgumentException("Cannot create an WorkOrder from a null entry");
            }
            this.entry = entry;
            this.context = context;
        }

        public void saveGroup(HelperContext context, String group) {
            SimpleEntry entrySave = new SimpleEntry();
            entrySave.setSchemaName(FORM_NAME);
            entrySave.setEntryItems(new Hashtable());

            entrySave.setEntryFieldValue(FLD_REQUEST_ID, getRequestId());
            entrySave.setEntryFieldValue(FLD_ASSIGNED_GROUPS, group);

            // Also set the values in this.entry so that the WO can be retrieved
            // without a second call to the database
            this.entry.setEntryFieldValue(FLD_ASSIGNED_GROUPS, group);

            // Build the helper
            ArsHelper helper = null;
            try {
                helper = new ArsHelper(context, FORM_NAME);
            } catch (Exception e) {
                throw new RuntimeException("Unable to initialize an ArsHelper instance.", e);
            }

            try {
                helper.doSetSimpleEntry(entrySave);
            } catch (Exception e) {
                throw new RuntimeException("There was a problem saving the "+FORM_NAME+" record.", e);
            }
        }

        public void saveMember(HelperContext context, String loginId, String name) {
            SimpleEntry entrySave = new SimpleEntry();
            entrySave.setSchemaName(FORM_NAME);
            entrySave.setEntryItems(new Hashtable());
            entrySave.setEntryFieldValue(FLD_REQUEST_ID, getRequestId());
            entrySave.setEntryFieldValue(FLD_ASSIGNEE_ID, loginId);
            entrySave.setEntryFieldValue(FLD_ASSIGNEE_NAME, name);

            // Also set the values in this.entry so that the WO can be retrieved
            // without a second call to the database
            this.entry.setEntryFieldValue(FLD_ASSIGNEE_ID, loginId);
            this.entry.setEntryFieldValue(FLD_ASSIGNEE_NAME, name);

            // Build the helper
            ArsHelper helper = null;
            try {
                helper = new ArsHelper(context, FORM_NAME);
            } catch (Exception e) {
                throw new RuntimeException("Unable to initialize an ArsHelper instance.", e);
            }

            try {
                helper.doSetSimpleEntry(entrySave);
            } catch (Exception e) {
                throw new RuntimeException("There was a problem saving the "+FORM_NAME+" record.", e);
            }
        }

        public String getRequestId() {return entry.getEntryFieldValue(FLD_REQUEST_ID);}
        public String getInstanceId() {return entry.getEntryFieldValue(FLD_INSTANCE_ID);}
        public String getOriginatingId() {return entry.getEntryFieldValue(FLD_ORIGINATING_ID);}
        public String getOriginatingSource() {return entry.getEntryFieldValue(FLD_ORIGINATING_SOURCE);}
        public String getAssigneeId() {return entry.getEntryFieldValue(FLD_ASSIGNEE_ID);}
        public String getAssigneeName() {return entry.getEntryFieldValue(FLD_ASSIGNEE_NAME);}
        public String getRequestedForId() {return entry.getEntryFieldValue(FLD_REQUESTED_FOR_ID);}
        public String getRequestedForName() {return entry.getEntryFieldValue(FLD_REQUESTED_FOR_NAME);}
        public String getWorkOrderName() {return entry.getEntryFieldValue(FLD_WORK_ORDER);}
        public String getRequestName() {return entry.getEntryFieldValue(FLD_REQUEST_NAME);}
        public String getStatus() {return entry.getEntryFieldValue(FLD_STATUS);}
        public String getSummary() {return entry.getEntryFieldValue(FLD_SUMMARY);}
        public String getDetails() {return entry.getEntryFieldValue(FLD_DETAILS);}
        public String getDueDate() {return entry.getEntryFieldValue(FLD_DUE_DATE); }
        public String getAssignedGroups() {return entry.getEntryFieldValue(FLD_ASSIGNED_GROUPS);}
        public String getAssignedGroupNames() {return entry.getEntryFieldValue(FLD_ASSIGNED_GROUP_NAMES);}

        public Map<String,Object> toJsonObject(HttpServletRequest request, String packagePath) {
            Map<String,Object> jsonObject = new LinkedHashMap<String,Object>();
            jsonObject.put("id",StringUtils.stripToNull(getRequestId()));
            jsonObject.put("requestName",StringUtils.stripToNull(getRequestName()));
            jsonObject.put("workOrder",StringUtils.stripToNull(getWorkOrderName()));
            Map<String,String> requestedFor = new LinkedHashMap<String,String>();
            requestedFor.put("name", getRequestedForName());
            requestedFor.put("loginId", getRequestedForId());
            if (!requestedFor.get("name").isEmpty() || !requestedFor.get("loginId").isEmpty()) {
                jsonObject.put("requestedFor", requestedFor);
            } else {jsonObject.put("requestedFor",null);}

            Map<String,String> assignee = new LinkedHashMap<String,String>();
            assignee.put("name",getAssigneeName());
            assignee.put("loginId",getAssigneeId());
            if (!assignee.get("loginId").isEmpty() || !assignee.get("name").isEmpty()) {
                jsonObject.put("assignee",assignee);
            } else {jsonObject.put("assignee",null);}

            Map<String,String> originator = new LinkedHashMap<String,String>();
            originator.put("id", getOriginatingId());
            originator.put("source", getOriginatingSource());

            // Pull back Source Url
            String url = "";
            Source source = Source.getSource(packagePath, getOriginatingSource());
            if (source != null) {
                url = source.getUrl(getOriginatingId());
            }
            originator.put("url", url);
            jsonObject.put("originator", originator);

            jsonObject.put("status",StringUtils.stripToNull(getStatus()));
            jsonObject.put("due",DateConverter.getIso8601(getDueDate()));
            jsonObject.put("details",StringUtils.stripToNull(getDetails()));
            jsonObject.put("summary", StringUtils.stripToNull(getSummary()));

            // Build up the Work Order Url
            String patternStr="(\\A.*?/kinetic/)";
            Pattern p = Pattern.compile(patternStr);
            Matcher m = p.matcher(request.getRequestURL());

            String baseRequestUrl = "";
            if (m.find()) {
                 baseRequestUrl = m.group(1);
            }
            jsonObject.put("workOrderURL",  baseRequestUrl + "DisplayPage?csrv=" + getInstanceId() + "&mobile=true");

          // Build groups
          String[] groups = getAssignedGroups().split("::");
          if (groups[0] == "") {
            jsonObject.put("groups",null);
          } else {
            jsonObject.put("groups", Arrays.asList(groups));
          }
          // String[] groupNames = getAssignedGroupNames().split("::");

          return jsonObject;
        }
    }
%>
